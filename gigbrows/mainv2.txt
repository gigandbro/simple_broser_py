import sys
import subprocess
from PyQt5.QtCore import *
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *

class BrowserTab(QWebEngineView):
    def __init__(self, url):
        super().__init__()
        self.setUrl(url)

class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –æ–∫–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ PNG
        self.setWindowIcon(QIcon("your_icon.png"))

        self.browser_tabs = QTabWidget()
        self.setCentralWidget(self.browser_tabs)

        navtb = QToolBar()
        self.addToolBar(navtb)

        back_btn = QAction("‚óÑ", self)
        back_btn.setStatusTip("–ù–∞–∑–∞–¥")
        navtb.addAction(back_btn)

        next_btn = QAction("‚ñ∫", self)
        next_btn.setStatusTip("–í–ø–µ—Ä–µ–¥")
        navtb.addAction(next_btn)

        reload_btn = QAction("üóò", self)
        reload_btn.setStatusTip("–û–±–Ω–æ–≤–∏—Ç—å")
        navtb.addAction(reload_btn)

        new_tab_btn = QAction("‚ûï", self)
        new_tab_btn.setStatusTip("–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
        new_tab_btn.triggered.connect(self.add_new_tab)
        navtb.addAction(new_tab_btn)

        close_tab_btn = QAction("‚úñ", self)
        close_tab_btn.setStatusTip("–ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É")
        close_tab_btn.triggered.connect(self.close_current_tab)
        navtb.addAction(close_tab_btn)

        navtb.addSeparator()

        self.urlbar = QLineEdit()
        self.urlbar.returnPressed.connect(self.navigate_to_url)
        navtb.addWidget(self.urlbar)

        self.show()

        self.browser_tabs.tabCloseRequested.connect(self.close_current_tab)
        self.browser_tabs.currentChanged.connect(self.update_urlbar)
        self.browser_tabs.currentChanged.connect(self.update_title)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        back_btn.triggered.connect(self.navigate_back)
        next_btn.triggered.connect(self.navigate_forward)
        reload_btn.triggered.connect(self.reload_current_browser)

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.add_new_tab()

    def update_title(self):
        current_browser = self.current_browser()
        if current_browser:
            title = current_browser.page().title()
            self.setWindowTitle("%s - gigbrows" % title)

    def navigate_to_url(self):
        q = QUrl(self.urlbar.text())
        if q.scheme() == "":
            q.setScheme("http")
        self.current_browser().setUrl(q)

    def update_urlbar(self):
        current_browser = self.current_browser()
        if current_browser:
            q = current_browser.url()
            self.urlbar.setText(q.toString())
            self.urlbar.setCursorPosition(0)

    def add_new_tab(self):
        self.create_new_tab(QUrl("https://www.google.com"))

    def close_current_tab(self):
        current_tab_index = self.browser_tabs.currentIndex()
        if current_tab_index >= 0:
            self.browser_tabs.removeTab(current_tab_index)

    def current_browser(self):
        current_tab_index = self.browser_tabs.currentIndex()
        if current_tab_index >= 0:
            return self.browser_tabs.widget(current_tab_index)
        return None

    def create_new_tab(self, url):
        browser_tab = BrowserTab(url)
        self.browser_tabs.addTab(browser_tab, "New Tab")
        self.browser_tabs.setCurrentWidget(browser_tab)

    def navigate_back(self):
        self.current_browser().back()

    def navigate_forward(self):
        self.current_browser().forward()

    def reload_current_browser(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.reload()

# –ó–∞–ø—É—Å–∫ installer.py –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
def run_installer():
    try:
        subprocess.run(["python", "installer.py"])  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "python" –∏–ª–∏ "python3" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å—Ä–µ–¥—ã Python
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ installer.py: {e}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º installer.py
    run_installer()

    # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
    app = QApplication(sys.argv)
    window = MainWindow()
    app.exec_()
